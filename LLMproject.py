# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17nSP7rcikYMbdMV6-rWi3Tdtwysrv5BX

*Title : LLM Project: Building a News Research Tool*
"""

import requests
print(requests.__version__)

!pip install -q langchain langchain-groq langchain-community newsapi-python python-dotenv

!pip install langchain-community --no-deps
!pip install langchain-core langchain-groq langchain-openai langchain-text-splitters --quiet

!pip install streamlit -q

#importing required libraries
import streamlit as st
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_groq import ChatGroq
from newsapi import NewsApiClient

!pip install streamlit pyngrok

from pyngrok import ngrok
from google.colab import userdata

!pip install streamlit pyngrok --quiet

from pyngrok import ngrok
ngrok.set_auth_token("mention ngrok token code")

keyword = st.text_input("Global news:")

api_choice = st.radio("Choose News API", ["NewsAPI.org", "GNews (Groq API)"])

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import requests
# from datetime import date
# 
# st.set_page_config(page_title=" Global News Summarizer", layout="wide")
# st.title(" Global News Summarizer")
# 
# # === API KEYS  ===
# NEWSAPI_KEY = "" #removing my api keys
# GNEWS_API_KEY = ""
# 
# # === Select API ===
# api_choice = st.radio("Choose News API", ["NewsAPI.org", "GNews (Groq API)"])
# 
# # === UI Filters ===
# country_options = [
#     "All", "India", "United States", "United Kingdom", "Germany", "Canada",
#     "Australia", "France", "Japan", "China", "Brazil", "Russia", "Italy", "Mexico"
# ]
# 
# category_options = [
#     "All", "Business", "Technology", "Health", "Sports",
#     "Science", "Entertainment", "Politics", "World", "Nation"
# ]
# 
# col1, col2, col3 = st.columns(3)
# with col1:
#     sel_country = st.selectbox("üåê Country", country_options)
# with col2:
#     sel_category = st.selectbox("üóÇÔ∏è Category", category_options)
# with col3:
#     keyword = st.text_input("üîç Keyword (Optional)", "")
# 
# col4, col5 = st.columns(2)
# with col4:
#     from_date = st.date_input("üìÖ From Date", value=date.today())
# with col5:
#     to_date = st.date_input("üìÖ To Date", value=date.today())
# 
# col6, col7 = st.columns(2)
# with col6:
#     sort_by = st.selectbox("üìä Sort by", ["publishedAt", "relevance", "popularity"])
# with col7:
#     language = st.selectbox("üó£Ô∏è Language", ["en", "es", "fr", "de", "it", "pt", "all"])
# 
# # === Pagination Support ===
# page = st.session_state.get("page", 1)
# if st.button("üîÑ Load More"):
#     page += 1
#     st.session_state.page = page
# else:
#     page = 1
#     st.session_state.page = 1
# 
# # === Utility ===
# def summarize_text(text, max_len=200):
#     if not text:
#         return "No summary available."
#     s = text.strip()
#     return s if len(s) <= max_len else s[:max_len].rsplit(" ", 1)[0] + "‚Ä¶"
# 
# # === Fallback Keyword ===
# fallback_keyword = keyword.strip() if keyword.strip() else "global"
# 
# # === API HANDLING ===
# 
# # 1. --- NEWSAPI.ORG ---
# if api_choice == "NewsAPI.org":
#     st.subheader("üì° Using NewsAPI.org")
# 
#     url = "https://newsapi.org/v2/everything"
#     params = {
#         "apiKey": NEWSAPI_KEY,
#         "q": fallback_keyword,
#         "from": from_date.isoformat(),
#         "to": to_date.isoformat(),
#         "sortBy": sort_by,
#         "language": language if language != "all" else None,
#         "page": page,
#         "pageSize": 10
#     }
# 
#     # Clean up params
#     params = {k: v for k, v in params.items() if v}
# 
#     response = requests.get(url, params=params)
#     if response.status_code == 200:
#         data = response.json()
#         articles = data.get("articles", [])
#         if not articles:
#             st.warning("No articles found. Try broader filters.")
#         else:
#             for article in articles:
#                 st.markdown(f"### üì∞ {article.get('title')}")
#                 st.write(summarize_text(article.get("description") or article.get("content")))
#                 st.markdown(f"[üîó Read more]({article.get('url')})")
#                 st.markdown("---")
#     else:
#         st.error(f"NewsAPI.org request failed: {response.status_code}")
#         st.write(response.text)
# 
# # 2. --- GNEWS (Groq API) ---
# elif api_choice == "GNews (Groq API)":
#     st.subheader("üì° Using GNews API")
# 
#     # Convert full country name to lowercase ISO2 code (GNews expects it)
#     country_map = {
#         "India": "in", "United States": "us", "United Kingdom": "gb", "Germany": "de",
#         "Canada": "ca", "Australia": "au", "France": "fr", "Japan": "jp", "China": "cn",
#         "Brazil": "br", "Russia": "ru", "Italy": "it", "Mexico": "mx"
#     }
#     topic_map = {
#         "Business": "business", "Technology": "technology", "Health": "health",
#         "Sports": "sports", "Science": "science", "Entertainment": "entertainment",
#         "Politics": "politics", "World": "world", "Nation": "nation"
#     }
# 
#     url = "https://gnews.io/api/v4/top-headlines"
#     params = {
#         "token": GNEWS_API_KEY,
#         "q": fallback_keyword,
#         "lang": language if language != "all" else "en",
#         "country": country_map.get(sel_country, None),
#         "topic": topic_map.get(sel_category, None),
#         "max": 10,
#         "page": page,
#         "sortBy": sort_by
#     }
# 
#     params = {k: v for k, v in params.items() if v}
# 
#     response = requests.get(url, params=params)
#     if response.status_code == 200:
#         data = response.json()
#         articles = data.get("articles", [])
#         if not articles:
#             st.warning("No articles found. Try broader filters.")
#         else:
#             for article in articles:
#                 st.markdown(f"### üì∞ {article.get('title')}")
#                 st.write(summarize_text(article.get("description") or article.get("content")))
#                 st.markdown(f"[üîó Read more]({article.get('url')})")
#                 st.markdown("---")
#     else:
#         st.error(f"GNews request failed: {response.status_code}")
#         st.write(response.text)

import time, threading
from pyngrok import ngrok

def run():
    !streamlit run app.py

threading.Thread(target=run).start()
time.sleep(5)
public_url = ngrok.connect(8501)
print(f"üåê Your Streamlit app is live here: {public_url}")

ngrok.kill()

"""**Testing and Validation**"""

query = "Example query"
response = "Example summary"

eval_prompt = f"""
Evaluate the following AI-generated summary for completeness and accuracy.
Query: {query}
Summary: {response}
Give a brief feedback and a score from 1 to 5.
"""
# eval_response = openai.ChatCompletion.create
#     model="gpt-4",
#     messages=[{"role": "user", "content": eval_prompt}]
# )
# print(eval_response['choices'][0]['message']['content'])
print(eval_prompt) # Print the prompt to show the fix

"""**Documentation and Finalization**"""

# Initialize NewsAPI client
newsapi = NewsApiClient(api_key='4819e084f7a9420cb124fcb3451bd7d4')

# Fetch articles based on user query
def get_news_articles(query):
    articles = newsapi.get_everything(q=query, language='en', sort_by='relevancy')
    return articles['articles']

# Extract descriptions for summarization
def summarize_articles(articles):
    summaries = []
    for article in articles:
        summaries.append(article['description'])
    return ' '.join(summaries)

"""**Optional Enhancements**

**Task 7.1: Add User Authentication**
"""

def check_password():
    def password_entered():
        if st.session_state["password"] == "your_password":
            st.session_state["authenticated"] = True
        else:
            st.session_state["authenticated"] = False

    if "authenticated" not in st.session_state:
        st.text_input("Password", type="password", on_change=password_entered, key="password")
        return False
    elif not st.session_state["authenticated"]:
        st.error("Wrong password")
        return False
    return True

if check_password():

    st.title("Authenticated App")

"""**Task 7.2: Enhance UI/UX**"""

for article in articles:
    with st.expander(article['title']):
        st.write(article['description'])

"""**Task 7.3: Extend Functionality**"""

import pandas as pd
if st.button("Save Query"):
    df = pd.DataFrame([{"Query": query, "Summary": response}])
    df.to_csv("query_history.csv", mode="a", header=False, index=False)
    st.success("Query saved.")